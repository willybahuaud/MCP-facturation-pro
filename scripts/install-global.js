#!/usr/bin/env node

import { execSync } from 'child_process';
import { existsSync, mkdirSync, writeFileSync, readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import chalk from 'chalk';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = join(__dirname, '..');

console.log(chalk.blue.bold('üöÄ Installation du serveur MCP Facturation.PRO global\n'));

try {
  // 1. Cr√©er le r√©pertoire ~/.local/bin s'il n'existe pas
  const localBinDir = join(process.env.HOME, '.local', 'bin');
  if (!existsSync(localBinDir)) {
    console.log(chalk.blue('üìÅ Cr√©ation du r√©pertoire ~/.local/bin...'));
    mkdirSync(localBinDir, { recursive: true });
  }

  // 2. Cr√©er le wrapper global
  console.log(chalk.blue('üìù Cr√©ation du wrapper global...'));
  const wrapperContent = `#!/bin/bash
# Wrapper pour le serveur MCP Facturation.PRO
# Ce script peut √™tre appel√© depuis n'importe o√π

# Chemin vers le projet MCP
MCP_PROJECT_DIR="${projectRoot}"

# V√©rifier que le projet existe
if [ ! -d "$MCP_PROJECT_DIR" ]; then
    echo "‚ùå Erreur: Projet MCP non trouv√© √† $MCP_PROJECT_DIR" >&2
    exit 1
fi

# Aller dans le r√©pertoire du projet
cd "$MCP_PROJECT_DIR"

# Lancer le serveur MCP
exec node src/functional-index.js
`;

  const wrapperPath = join(localBinDir, 'facturation-pro-mcp-wrapper');
  writeFileSync(wrapperPath, wrapperContent);
  
  // Rendre le script ex√©cutable
  execSync(`chmod +x "${wrapperPath}"`, { stdio: 'inherit' });
  console.log(chalk.green('‚úÖ Wrapper cr√©√© et rendu ex√©cutable'));

  // 3. Cr√©er ou mettre √† jour la configuration Cursor
  console.log(chalk.blue('‚öôÔ∏è  Configuration de Cursor...'));
  const cursorDir = join(process.env.HOME, '.cursor');
  if (!existsSync(cursorDir)) {
    mkdirSync(cursorDir, { recursive: true });
  }

  const mcpConfigPath = join(cursorDir, 'mcp.json');
  let mcpConfig = {};

  // Lire la configuration existante si elle existe
  if (existsSync(mcpConfigPath)) {
    try {
      const existingConfig = readFileSync(mcpConfigPath, 'utf8');
      mcpConfig = JSON.parse(existingConfig);
    } catch (error) {
      console.log(chalk.yellow('‚ö†Ô∏è  Configuration Cursor existante invalide, cr√©ation d\'une nouvelle'));
    }
  }

  // Ajouter ou mettre √† jour la configuration facturation-pro
  if (!mcpConfig.mcpServers) {
    mcpConfig.mcpServers = {};
  }

  mcpConfig.mcpServers['facturation-pro'] = {
    command: wrapperPath
  };

  // Sauvegarder la configuration
  writeFileSync(mcpConfigPath, JSON.stringify(mcpConfig, null, 2));
  console.log(chalk.green('‚úÖ Configuration Cursor mise √† jour'));

  // 4. Synchroniser les donn√©es
  console.log(chalk.blue('üîÑ Synchronisation des donn√©es...'));
  try {
    execSync('npm run sync', { 
      cwd: projectRoot, 
      stdio: 'inherit' 
    });
    console.log(chalk.green('‚úÖ Donn√©es synchronis√©es'));
  } catch (error) {
    console.log(chalk.yellow('‚ö†Ô∏è  Erreur lors de la synchronisation, vous pourrez la relancer avec: npm run sync'));
  }

  // 5. R√©sum√©
  console.log(chalk.green.bold('\nüéâ Installation termin√©e avec succ√®s !'));
  console.log(chalk.white('\nüìã Prochaines √©tapes :'));
  console.log(chalk.white('1. Red√©marrez compl√®tement Cursor'));
  console.log(chalk.white('2. Ouvrez n\'importe quel projet'));
  console.log(chalk.white('3. V√©rifiez que "facturation-pro" appara√Æt dans les param√®tres MCP'));
  console.log(chalk.white('4. Utilisez des commandes comme "Recherche mes 5 plus gros devis"'));
  
  console.log(chalk.blue('\nüîß Configuration sauvegard√©e dans :'));
  console.log(chalk.gray(`   ${mcpConfigPath}`));
  console.log(chalk.blue('üì¶ Wrapper install√© dans :'));
  console.log(chalk.gray(`   ${wrapperPath}`));

} catch (error) {
  console.error(chalk.red.bold('\n‚ùå Erreur lors de l\'installation :'));
  console.error(chalk.red(error.message));
  process.exit(1);
}
